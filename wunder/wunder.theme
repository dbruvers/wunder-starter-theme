<?php

/**
 * @file
 * Functions to support theming in the wunder theme.
 */

use Drupal\Component\Utility\Html;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function wunder_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  /*// Use Panels Page variant id as a body class.
  $page_variant = \Drupal::routeMatch()->getParameter('page_manager_page_variant');
  if (!empty($page_variant)) {
    $variant_id = $page_variant->getPage()->id();
    // Convert underscores to dashes and return clean CSS identifier.
    $variables['attributes']['class'][] = Html::getClass('panel-page--' . $variant_id);;
  }*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function wunder_preprocess_page(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function wunder_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function wunder_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block templates.
 */
function wunder_preprocess_block(array &$variables) {

  // Add bundle and view_mode variables for content blocks.
  if (isset($variables['elements']['content']['#block_content'])) {
    $variables['bundle'] = $variables['elements']['content']['#block_content']->bundle();

    if (isset($variables['elements']['#configuration']['view_mode'])) {
      $variables['view_mode'] = $variables['elements']['#configuration']['view_mode'];
    }
  }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function wunder_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function wunder_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function wunder_preprocess_node(array &$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  //$node = $variables['node'];
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function wunder_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function wunder_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function wunder_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function wunder_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function wunder_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function wunder_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function wunder_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}
